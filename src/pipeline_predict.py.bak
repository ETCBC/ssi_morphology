import os

from config import device
from evaluate_transformer import translate
from new_data_reader import ConfigParser, ModelImporter, NewDataReader, HebrewWordsNewText

class PipeLinePredict:
    def __init__(self, predict_config_file):
        self.predict_config_file = predict_config_file
    
        self.config_parser = self.parse_config()
        self.model_importer = self.load_model()
        
        self.new_data_reader = self.read_new_data()
        self.new_dataset = self.make_new_dataset()
    
        self.make_predictions_transformer_model()
    
    
    def parse_config(self):
        config_parser = ConfigParser(self.predict_config_file)
        return config_parser
        
    def load_model(self):
        model_importer = ModelImporter(self.config_parser.model_config_data, 
                                       self.config_parser.pth, 
                                       self.config_parser.model_folder, 
                                       self.config_parser.model_name)
        return model_importer
        
    def read_new_data(self):
        new_data_reader = NewDataReader(self.config_parser.new_data_file, 
                                        self.config_parser.model_config_data['seq_len'])
        return new_data_reader
                                        
    def make_new_dataset(self):
        hebrew_words_new_text = HebrewWordsNewText(self.new_data_reader.prepared_data,
                                                   self.config_parser.model_config_data['input_w2idx'],
                                                   self.config_parser.model_config_data['output_w2idx'])
        return hebrew_words_new_text
        
        
    def make_predictions_transformer_model(self):
        model = self.model_importer.loaded_transformer
        model.eval()

        eval_path = f'../evaluation_results_transformer/'
        evaluation_file_name = 'predictions_samaritan_genesis'

        eval_path = eval_path + f'samaritan_genesis_'

        isExist = os.path.exists(eval_path)
        if not isExist:
            os.makedirs(eval_path)

        with open(f'{eval_path}/results_{evaluation_file_name}.txt', 'w') as f:
            test_len = len(self.new_dataset)
            for i in range(test_len):
                predicted = translate(model.to(device), self.new_dataset[i]['encoded_text'].to(device),
                                  self.new_dataset.OUTPUT_IDX_TO_WORD, 
                                  self.new_dataset.OUTPUT_WORD_TO_IDX)
                print(self.new_dataset[i]['text'])
                print(predicted)
                indices = str(self.new_dataset[i]['indices'])
                text = self.new_dataset[i]['text']
                f.write(f'Raw Text {text}\n')
                f.write(f'Predicted {predicted}\n')
                f.write(f'Indices {indices}\n')